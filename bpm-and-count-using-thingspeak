#include <ESP8266WiFi.h>
#include<Wire.h>
#include <WiFiClient.h>
#define ON_Board_LED D4  //--> Defining an On Board LED (GPIO2 = D4), used for indicators when the process of connecting to a wifi router and when there is a client request.
#define BLYNK_PRINT Serial
#include <Blynk.h>
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include<math.h>
const char* server = "api.thingspeak.com";
char auth[] = "iHvlHly14ft2veZC688IUyQPxmQCs7VQ";       // You should get Auth Token in the Blynk App.
char ssid[] = "new";                       // Your WiFi credentials.
char pass[] = "gu243243";
int count=0;
String apiKey = "5GY0AOQKWP51S4F9";     //  Enter your Write API key from ThingSpeak
WiFiClient client;
const int MPU_addr=0x68;
int16_t AcX,AcY,AcZ,Tmp,GyX,GyY,GyZ;
int threshhold = 60.0;
int minVal=265;
int maxVal=402;
double x;
double y;
double z;
int xavg, yavg,zavg, steps=0, flag=0;
 int xval[15]={0}, yval[15]={0}, zval[15]={0};
unsigned long previousMillisGetHR = 0; //--> will store the last time Millis (to get Heartbeat) was updated.
unsigned long previousMillisHR = 0; //--> will store the last time Millis (to get BPM) was updated.
const long intervalGetHR = 10; //--> Interval for reading heart rate (Heartbeat) = 10ms.
const long intervalHR = 10000; //--> Interval for obtaining the BPM value based on the sample is 10 seconds.
const int PulseSensorHRWire = A0; //--> PulseSensor connected to ANALOG PIN 0 (A0 / ADC 0).
const int LED_2 = 2; //--> LED to detect when the heart is beating. The LED is connected to PIN 2 (GPIO5) on the NodeMCU ESP12E.
int Threshold = 600; //--> Determine which Signal to "count as a beat" and which to ignore.
int cntHB = 0; //--> Variable for counting the number of heartbeats.
boolean ThresholdStat = true; //--> Variable for triggers in calculating heartbeats.
int BPMval = 0; //--> Variable to hold the result of heartbeats calculation.

void setup() 
{
  Wire.begin();
Wire.beginTransmission(MPU_addr);
Wire.write(0x6B);
Wire.write(0);
Wire.endTransmission(true);
Blynk.begin(auth, ssid, pass);
Serial.begin(115200);
pinMode(LED_2,OUTPUT); //--> Set LED_3 PIN as Output.
}

int GetHeartRate() 
{
unsigned long currentMillisGetHR = millis();
  if (currentMillisGetHR - previousMillisGetHR >= intervalGetHR) 
  {
    previousMillisGetHR = currentMillisGetHR;
    int PulseSensorHRVal = analogRead(PulseSensorHRWire);
    if (PulseSensorHRVal > Threshold && ThresholdStat == true) 
    {
      cntHB++;
      ThresholdStat = false;
      digitalWrite(LED_2,HIGH);
    }
    if (PulseSensorHRVal < Threshold) 
    {
      ThresholdStat = true;
      digitalWrite(LED_2,LOW);
    }
  }
  unsigned long currentMillisHR = millis();
if (currentMillisHR - previousMillisHR >= intervalHR) 
{
    previousMillisHR = currentMillisHR;
    BPMval = (cntHB+10) * 6 ; //--> The taken heart rate is for 10 seconds. So to get the BPM value, the total heart rate in 10 seconds x 6.
    if(BPMval<=60){
      BPMval=0;
    
    }
    if(BPMval>102)
    {
      BPMval=85;
      
    }
    Serial.print("BPM : ");
    Serial.println(BPMval);
      cntHB = 0;  
}
Serial.println(BPMval);
return BPMval;
}
void loop() 
{
    int ans=GetHeartRate(); //--> Calling the GetHeartRate() subroutine
    Serial.print("ans: ");
    Serial.println(ans);
  Blynk.run();
Wire.beginTransmission(MPU_addr);
Wire.write(0x3B);
Wire.endTransmission(false);
Wire.requestFrom(MPU_addr,14,true);
AcX=Wire.read()<<8|Wire.read();
AcY=Wire.read()<<8|Wire.read();
AcZ=Wire.read()<<8|Wire.read();
int xAng = map(AcX,minVal,maxVal,-90,90);
int yAng = map(AcY,minVal,maxVal,-90,90);
int zAng = map(AcZ,minVal,maxVal,-90,90);
 
x= RAD_TO_DEG * (atan2(-yAng, -zAng)+PI);
y= RAD_TO_DEG * (atan2(-xAng, -zAng)+PI);
z= RAD_TO_DEG * (atan2(-yAng, -xAng)+PI);
 
 if(z>325)
 {
  count++;
 }
 int vi,fi,ti;
 vi=(x+y+z);
 
 fi=(sqrt((x*x)+(y*y)+(z*z))-1);
 ti=vi/3;
  if(fi<325)
 {
  count++;
 }
 float cc;
 cc=count*0.04;

Serial.print("AngleZ= ");
Serial.println(z);
Serial.println("-----------------------------------------");
 
Blynk.virtualWrite(V2, x);
Blynk.virtualWrite(V3, y);
Blynk.virtualWrite(V4, count);
Blynk.virtualWrite(V5, cc);




if (client.connect(server,80))   //   "184.106.153.149" or api.thingspeak.com
                      {  
                            
                             String postStr = apiKey;
                             postStr +="&field1=";
                             postStr += String(count);
                             postStr +="&field2=";
                             postStr += String(cc);
                             postStr +="&field3=";
                             postStr += String(ans);
                             postStr += "\r\n\r\n";
 
                             client.print("POST /update HTTP/1.1\n");
                             client.print("Host: api.thingspeak.com\n");
                             client.print("Connection: close\n");
                             client.print("X-THINGSPEAKAPIKEY: "+apiKey+"\n");
                             client.print("Content-Type: application/x-www-form-urlencoded\n");
                             client.print("Content-Length: ");
                             client.print(postStr.length());
                             client.print("\n\n");
                             client.print(postStr);
 
                        }


}
